/*
ЛР №6
Проектування багатотабличних запитів (внутрішнє з'єднання, inner join, left join, right join, self join, subquery, correlated subquery, exists, not exist, union)

1. Вивести значення наступних колонок: назва книги, ціна, назва видавництва. Використовувати внутрішнє з'єднання, застосовуючи where.
2. Вивести значення наступних колонок: назва книги, назва категорії. Використовувати внутрішнє з'єднання, застосовуючи inner join.
3. Вивести значення наступних колонок: назва книги, ціна, назва видавництва, формат.
4. Вивести значення наступних колонок: тема, категорія, назва книги, назва видавництва. Фільтр по темам і категоріям.
5. Вивести книги видавництва 'BHV', видані після 2000 р
6. Вивести загальну кількість сторінок по кожній назві категорії. Фільтр по спадаючій кількості сторінок.
7. Вивести середню вартість книг по темі 'Використання ПК' і категорії 'Linux'.
8. Вивести всі дані універсального відношення. Використовувати внутрішнє з'єднання, застосовуючи where.
9. Вивести всі дані універсального відношення. Використовувати внутрішнє з'єднання, застосовуючи inner join.
10. Вивести всі дані універсального відношення. Використовувати зовнішнє з'єднання, застосовуючи left join / rigth join.
11. Вивести пари книг, що мають однакову кількість сторінок. Використовувати само об’єднання і аліаси (self join).
12. Вивести тріади книг, що мають однакову ціну. Використовувати самооб'єднання і аліаси (self join).
13. Вивести всі книги категорії 'C ++'. Використовувати підзапити (subquery).
14. Вивести книги видавництва 'BHV', видані після 2000 р Використовувати підзапити (subquery).
15. Вивести список видавництв, у яких розмір книг перевищує 400 сторінок. Використовувати пов'язані підзапити (correlated subquery).
16. Вивести список категорій в яких більше 3-х книг. Використовувати пов'язані підзапити (correlated subquery).
17. Вивести список книг видавництва 'BHV', якщо в списку є хоча б одна книга цього видавництва. Використовувати exists.
18. Вивести список книг видавництва 'BHV', якщо в списку немає жодної книги цього видавництва. Використовувати not exists.
19. Вивести відсортований загальний список назв тем і категорій. Використовувати union.
20. Вивести відсортований в зворотному порядку загальний список перших слів, назв книг і категорій що не повторюються. Використовувати union.
*/


#1. Вивести значення наступних колонок: назва книги, ціна, назва видавництва. Використовувати внутрішнє з'єднання, застосовуючи where.
SELECT 
	`book`.`name` AS `name_book`, 
	`book`.`price` AS `price_book`,
	`publishers`.`name` AS `name_publisher`
FROM `book`, `publishers`
WHERE `book`.`id_publisher` = `publishers`.`id_publisher`;

#2. Вивести значення наступних колонок: назва книги, назва категорії. Використовувати внутрішнє з'єднання, застосовуючи inner join.
SELECT
	`book`.`name` AS `name_book`, 
	`categories`.`name` AS `name_category`
FROM `book`
INNER JOIN `categories` ON `book`.`id_category` = `categories`.`id_category`;

#3. Вивести значення наступних колонок: назва книги, ціна, назва видавництва, формат.
SELECT
	`book`.`name` AS `name_book`,
    `book`.`price` AS `price_book`,
    `publishers`.`name` AS `name_publisher`,
    `book`.`format` AS `format_book`
FROM `book`
JOIN `publishers` ON `book`.`id_publisher` = `publishers`.`id_publisher`;

#4. Вивести значення наступних колонок: тема, категорія, назва книги, назва видавництва. Фільтр по темам і категоріям.
SELECT
	`topics`.`name` AS `name_topic`,
    `categories`.`name` AS `name_category`,
    `book`.`name` AS `name_book`,
    `publishers`.`name` AS `name_publisher`
FROM book
JOIN `topics` ON `book`.`id_topic` = `topics`.`id_topic`
JOIN `categories` ON `book`.`id_category` = `categories`.`id_category`
JOIN `publishers` ON `book`.`id_publisher` = `publishers`.`id_publisher`
ORDER BY `topics`.`name`, `categories`.`name`;

#5. Вивести книги видавництва 'BHV', видані після 2000 р
SELECT
	`book`.`name` AS `name_book`,
    `book`.`date` AS `date_book`,
    `publishers`.`name` AS `name_publisher`
FROM `book`
JOIN `publishers` ON `book`.`id_publisher` = `publishers`.`id_publisher`
WHERE `publishers`.`name` = 'BHV' AND YEAR(`book`.`date`) > 2000;


#6. Вивести загальну кількість сторінок по кожній назві категорії. Фільтр по спадаючій кількості сторінок.
SELECT
	`categories`.`name` AS `name_category`,
    SUM(`book`.`pages`) AS `SUM_pages_book`
FROM `book`
JOIN `categories` ON `book`.`id_category` = `categories`.`id_category`
GROUP BY `book`.`id_category`
ORDER BY `SUM_pages_book` DESC;

#7. Вивести середню вартість книг по темі 'Використання ПК' і категорії 'Linux'.
SELECT
	AVG(`book`.`price`) AS `AVG_price_book`,
    `topics`.`name` AS `name_publisher`,
    `categories`.`name` AS `name_category`
FROM `book`
JOIN `topics` ON `book`.`id_topic` = `topics`.`id_topic`
JOIN `categories` ON `book`.`id_category` = `categories`.`id_category`
WHERE `topics`.`name` ='Використання ПК' AND `categories`.`name` = 'Linux';

#8. Вивести всі дані універсального відношення. Використовувати внутрішнє з'єднання, застосовуючи where.
SELECT *
FROM `book`, `publishers`, `topics`, `categories`
WHERE `book`.`id_publisher` = `publishers`.`id_publisher` AND `book`.`id_topic` = `topics`.`id_topic` AND `book`.`id_category` = `categories`.`id_category`;

#9. Вивести всі дані універсального відношення. Використовувати внутрішнє з'єднання, застосовуючи inner join.
SELECT *
FROM `book`
INNER JOIN  `publishers` ON `book`.`id_publisher` = `publishers`.`id_publisher`
INNER JOIN `topics` ON `book`.`id_topic` = `topics`.`id_topic`
INNER JOIN `categories` ON `book`.`id_category` = `categories`.`id_category`;

#10. Вивести всі дані універсального відношення. Використовувати зовнішнє з'єднання, застосовуючи left join / rigth join.
# left join
SELECT *
FROM `book`
LEFT JOIN `publishers` ON `book`.`id_publisher` = `publishers`.`id_publisher`
LEFT JOIN `topics` ON `book`.`id_topic` = `topics`.`id_topic`
LEFT JOIN `categories` ON `book`.`id_category` = `categories`.`id_category`;

# rigth join
SELECT *
FROM `publishers`
RIGHT JOIN `book` ON `book`.`id_publisher` = `publishers`.`id_publisher`
RIGHT JOIN `topics` ON `book`.`id_topic` = `topics`.`id_topic`
RIGHT JOIN `categories` ON `book`.`id_category` = `categories`.`id_category`;

#11. Вивести пари книг, що мають однакову кількість сторінок. Використовувати само об’єднання і аліаси (self join).
SELECT 
    `b1`.`name` AS `book1`, 
    `b2`.`name` AS `book2`, 
    `b1`.`pages`
FROM `book` AS `b1`
JOIN `book` AS `b2` ON `b1`.`pages` = `b2`.`pages` AND `b1`.`id_book` < `b2`.`id_book`
ORDER BY `b1`.`pages`;

#12. Вивести тріади книг, що мають однакову ціну. Використовувати самооб'єднання і аліаси (self join).
SELECT
    `b1`.`name` AS `book1`,
    `b2`.`name` AS `book2`, 
    `b3`.`name` AS `book3`, 
    `b1`.`price`
FROM `book` AS `b1`
JOIN `book` AS `b2` ON `b1`.`price` = `b2`.`price` AND `b1`.`id_book` < `b2`.`id_book`
JOIN `book` AS `b3` ON `b1`.`price` = `b3`.`price` AND `b2`.`price` = `b3`.`price` AND `b1`.`id_book` > `b3`.`id_book`
ORDER BY `b1`.`price`;

#13. Вивести всі книги категорії 'C ++'. Використовувати підзапити (subquery).
SELECT 
    `b`.`name` AS `name_book`
FROM `book` AS `b`
WHERE `b`.`id_category` = (
    	SELECT `c`.`id_category`
    	FROM `categories` AS `c`
    	WHERE `c`.`name` = 'C++'
	);

#14. Вивести книги видавництва 'BHV', видані після 2000 р Використовувати підзапити (subquery).
SELECT
	`b`.`name` AS `name_book`,
    `b`.`date` AS `date_book`
FROM `book` AS `b`
WHERE `b`.`id_publisher` = (
    	SELECT `p`.`id_publisher`
    	FROM `publishers` AS `p`
    	WHERE `p`.`name` = 'BHV'
    ) AND YEAR(`b`.`date`) > 2000;

#15. Вивести список видавництв, у яких розмір книг перевищує 400 сторінок. Використовувати пов'язані підзапити (correlated subquery).

SELECT 
	`p`.`name` AS `name_publisher`
FROM `publishers` AS `p`
WHERE EXISTS (
    	SELECT `b`.`id_publisher`
    	FROM `book` AS `b`
    	WHERE `p`.`id_publisher` = `b`.`id_publisher` AND `b`.`pages` > 400
	);

#16. Вивести список категорій в яких більше 3-х книг. Використовувати пов'язані підзапити (correlated subquery).
SELECT 
	`c`.`name` AS `name_category`
FROM `categories` AS `c`
WHERE (
    	SELECT COUNT(`b`.`id_category`)
    	FROM `book` AS `b`
    	WHERE `c`.`id_category` = `b`.`id_category`
	) > 3;

#17. Вивести список книг видавництва 'BHV', якщо в списку є хоча б одна книга цього видавництва. Використовувати exists.
SELECT
	`b`.`name` AS `name_book`
FROM `book` AS `b`
WHERE EXISTS(
    	SELECT *
    	FROM `publishers` AS `p`
    	WHERE `p`.`name` = 'BHV' AND `p`.`id_publisher` = `b`.`id_publisher`
	);

#18. Вивести список книг видавництва 'BHV', якщо в списку немає жодної книги цього видавництва. Використовувати not exists.
SELECT 
	`b1`.`name` AS `name_book`
FROM `book` AS `b1`
WHERE NOT EXISTS(
    	SELECT * 
    	FROM `book` AS `b2`
    	WHERE `b2`.`id_publisher` = (
            	SELECT `id_publisher`
            	FROM `publishers`
            	WHERE `name` = 'BHV'
        	) AND `b1`.`id_publisher` <> `b2`.`id_publisher`
	);


#19. Вивести відсортований загальний список назв тем і категорій. Використовувати union.
(SELECT * FROM `topics`)
UNION (SELECT * FROM `categories`)
ORDER BY `name`;

#20. Вивести відсортований в зворотному порядку загальний список перших слів, назв книг і категорій що не повторюються. Використовувати union.
(SELECT DISTINCT SUBSTRING_INDEX(`b`.`name`, ' ', 1) AS `first_word_name` FROM `book` AS `b`)
UNION (SELECT DISTINCT SUBSTRING_INDEX(c.`name`, ' ', 1) AS `first_word_name` FROM `categories` AS c)
ORDER BY `first_word_name` DESC;