/*
ЛР №4
Проектування однотабличних запитів, що містять функції агрегування і групування

1. Вивести статистику: загальна кількість всіх книг, їх вартість, їх середню вартість, мінімальну і максимальну ціну
2. Вивести загальну кількість всіх книг без урахування книг з непроставленою ціною
3. Вивести статистику (див. 1) для книг новинка / не новинка
4. Вивести статистику (див. 1) для книг за кожним роком видання
5. Змінити п.4, виключивши з статистики книги з ціною від 10 до 20
6. Змінити п.4. Відсортувати статистику по спадаючій кількості.
7. Вивести загальну кількість кодів книг і кодів книг що не повторюються
8. Вивести статистику: загальна кількість і вартість книг по першій букві її назви
9. Змінити п. 8, виключивши з статистики назви що починаються з англ. букви або з цифри.
10. Змінити п. 9 так щоб до складу статистики потрапили дані з роками більшими за 2000.
11. Змінити п. 10. Відсортувати статистику по спадаючій перших букв назви.
12. Вивести статистику (див. 1) по кожному місяцю кожного року.
13. Змінити п. 12 так щоб до складу статистики не увійшли дані з незаповненими датами.
14. Змінити п. 12. Фільтр по спадаючій року і зростанню місяця.
15. Вивести статистику для книг новинка / не новинка: загальна ціна, загальна ціна в грн. / Євро / руб. Колонкам запиту дати назви за змістом.
16. Змінити п. 15 так щоб виводилася округлена до цілого числа (дол. / Грн. / Євро / руб.) Ціна.
17. Вивести статистику (див. 1) по видавництвах.
18. Вивести статистику (див. 1) за темами і видавництвами. Фільтр по видавництвам.
19. Вивести статистику (див. 1) за категоріями, темами і видавництвами. Фільтр по видавництвам, темах, категоріям.
20. Вивести список видавництв, у яких округлена до цілого ціна однієї сторінки більше 10 копійок.
*/
    #1. Вивести статистику: загальна кількість всіх книг, їх вартість, їх середню вартість, мінімальну і максимальну ціну
SELECT
    COUNT(*) AS `total_books`,
    SUM(`price`) AS `total_price`,
    AVG(`price`) AS `average_price`,
    MIN(`price`) AS `min_price`,
    MAX(`price`) AS `max_price`
FROM `book`;

#2. Вивести загальну кількість всіх книг без урахування книг з непроставленою ціною
SELECT
    COUNT(*) AS total_books
FROM `book`
WHERE `price` IS NOT NULL;

#3. Вивести статистику (див. 1) для книг новинка / не новинка
SELECT
    COUNT(*) AS `total_books`,
    `novelty`,
    SUM(`price`) AS `total_price`,
    AVG(`price`) AS `average_price`,
    MIN(`price`) AS `min_price`,
    MAX(`price`) AS `max_price`
FROM `book`
GROUP BY `novelty`;

#4. Вивести статистику (див. 1) для книг за кожним роком видання
SELECT
    COUNT(*) AS `total_books`,
    YEAR(`date`) AS `year_publication`,
    SUM(`price`) AS `total_price`,
    AVG(`price`) AS `average_price`,
    MIN(`price`) AS `min_price`,
    MAX(`price`) AS `max_price`
FROM `book`
GROUP BY `year_publication`;

#5. Змінити п.4, виключивши з статистики книги з ціною від 10 до 20
SELECT
    COUNT(*) AS `total_books`,
    YEAR(`date`) AS `year_publication`,
    SUM(`price`) AS `total_price`,
    AVG(`price`) AS `average_price`,
    MIN(`price`) AS `min_price`,
    MAX(`price`) AS `max_price`
FROM `book`
WHERE `price` NOT BETWEEN 10 AND 20
GROUP BY `year_publication`;

#6. Змінити п.4. Відсортувати статистику по спадаючій кількості.
SELECT
    COUNT(*) AS `total_books`,
    YEAR(`date`) AS `year_publication`,
    SUM(`price`) AS `total_price`,
    AVG(`price`) AS `average_price`,
    MIN(`price`) AS `min_price`,
    MAX(`price`) AS `max_price`
FROM `book`
WHERE `price` NOT BETWEEN 10 AND 20
GROUP BY `year_publication`
ORDER BY COUNT(*) DESC;

#7. Вивести загальну кількість кодів книг і кодів книг що не повторюються
SELECT
    COUNT(`code`) AS `count_code`,
    COUNT(DISTINCT `code`) AS `without_repetition_code`
FROM `book`;

#8. Вивести статистику: загальна кількість і вартість книг по першій букві її назви
SELECT
    LEFT(`title`, 1) AS `first_letter_of_name`,
    COUNT(*) AS `count_books`,
    SUM(`price`) AS `total_price`
FROM `book` first_letter_of_name
GROUP BY `first_letter_of_name`;

#9. Змінити п. 8, виключивши з статистики назви що починаються з англ. букви або з цифри.
SELECT
    LEFT(`title`, 1) AS `first_letter_of_name`,
    COUNT(*) AS `count_books`,
    SUM(`price`) AS `total_price`
FROM `book`
WHERE `title` NOT REGEXP '^[A-Za-z0-9]'
GROUP BY `first_letter_of_name`;

#10. Змінити п. 9 так щоб до складу статистики потрапили дані з роками більшими за 2000.
SELECT
    LEFT(`title`, 1) AS `first_letter_of_name`,
    COUNT(*) AS `count_books`,
    SUM(`price`) AS `total_price`,
    IF(YEAR(`date`) > 2000, YEAR(`date`), NULL) AS `year`
FROM `book`
WHERE `title` NOT REGEXP '^[A-Za-z0-9]'
GROUP BY `first_letter_of_name`;

#11. Змінити п. 10. Відсортувати статистику по спадаючій перших букв назви.
SELECT
    LEFT(`title`, 1) AS `first_letter_of_name`,
    COUNT(*) AS `count_books`,
    SUM(`price`) AS `total_price`,
    IF(YEAR(`date`) > 2000, YEAR(`date`), NULL) AS `year`
FROM `book`
WHERE `title` NOT REGEXP '^[A-Za-z0-9]'
GROUP BY `first_letter_of_name`
ORDER BY LEFT(`title`, 1) DESC;

#12. Вивести статистику (див. 1) по кожному місяцю кожного року.
SELECT
    COUNT(*) AS `total_books`,
    DATE_FORMAT(`date`, '%Y-%m') AS `YearMonth`,
    SUM(`price`) AS `total_price`,
    AVG(`price`) AS `average_price`,
    MIN(`price`) AS `min_price`,
    MAX(`price`) AS `max_price`
FROM `book`
GROUP BY `YearMonth`;
    
#13. Змінити п. 12 так щоб до складу статистики не увійшли дані з незаповненими датами.
SELECT
    COUNT(*) AS `total_books`,
    DATE_FORMAT(`date`, '%Y-%m') AS `YearMonth`,
    SUM(`price`) AS `total_price`,
    AVG(`price`) AS `average_price`,
    MIN(`price`) AS `min_price`,
    MAX(`price`) AS `max_price`
FROM `book`
WHERE `date` IS NOT NULL
GROUP BY YearMonth;

#14. Змінити п. 12. Фільтр по спадаючій року і зростанню місяця..
SELECT
    COUNT(*) AS `total_books`,
    DATE_FORMAT(`date`, '%Y-%m') AS `YearMonth`,
    SUM(`price`) AS `total_price`,
    AVG(`price`) AS `average_price`,
    MIN(`price`) AS `min_price`,
    MAX(`price`) AS `max_price`
FROM `book`
GROUP BY `YearMonth`
ORDER BY YEAR(`date`) DESC, MONTH(`date`) ASC;

#15. Вивести статистику для книг новинка / не новинка: загальна ціна, загальна ціна в грн. / Євро / руб. Колонкам запиту дати назви за змістом.
SELECT
    `novelty`,
    SUM(`price`) AS `usd`,
    SUM(`price`) * 36.41 AS `uah`,
    SUM(`price`) * 0.93 AS `eur`,
    SUM(`price`) * 160 AS `unknown_currency`
FROM `book`
GROUP BY `novelty`;

#16. Змінити п. 15 так щоб виводилася округлена до цілого числа (дол. / Грн. / Євро / руб.) Ціна.
SELECT
    `novelty`,
    ROUND(SUM(`price`)) AS `usd`,
    ROUND(SUM(`price`) * 36.41) AS `uah`,
    ROUND(SUM(`price`) * 0.93) AS `eur`,
    ROUND(SUM(`price`) * 160) AS `unknown_currency`
FROM `book`
GROUP BY `novelty`;

    #17. Вивести статистику (див. 1) по видавництвах.
SELECT
    COUNT(*) AS `total_books`,
    `publisher`,
    SUM(`price`) AS `total_price`,
    AVG(`price`) AS `average_price`,
    MIN(`price`) AS `min_price`,
    MAX(`price`) AS `max_price`
FROM `book`
GROUP BY `publisher`;

#18. Вивести статистику (див. 1) за темами і видавництвами. Фільтр по видавництвам.
SELECT
    COUNT(*) AS `total_books`,
    `topic`,
    `publisher`,
    SUM(`price`) AS `total_price`,
    AVG(`price`) AS `average_price`,
    MIN(`price`) AS `min_price`,
    MAX(`price`) AS `max_price`
FROM `book`
GROUP BY `topic`, `publisher`
ORDER BY `publisher`;

#19. Вивести статистику (див. 1) за категоріями, темами і видавництвами. Фільтр по видавництвам, темах, категоріям.
SELECT
    COUNT(*) AS `total_books`,
    `category`,
    `topic`,
    `publisher`,
    SUM(`price`) AS `total_price`,
    AVG(`price`) AS `average_price`,
    MIN(`price`) AS `min_price`,
    MAX(`price`) AS `max_price`
FROM `book`
GROUP BY `category`, `topic`, `publisher`
ORDER BY `publisher`, `topic`, `category`;

#20. Вивести список видавництв, у яких округлена до цілого ціна однієї сторінки більше 10 копійок.
SELECT
    `publisher`,
    ROUND((SUM(`price`) / SUM(`pages`)) * 100, 0) AS `price_per_page_in_pennies`
FROM `book`
GROUP BY `publisher`
HAVING `price_per_page_in_pennies` > 10;